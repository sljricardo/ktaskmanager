/*
 * This file is generated by jOOQ.
 */
package com.sljricardo.jooq.tables.records


import com.sljricardo.jooq.tables.Task

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TaskRecord() : UpdatableRecordImpl<TaskRecord>(Task.TASK) {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var assigneeId: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var state: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised TaskRecord
     */
    constructor(id: String? = null, name: String? = null, description: String? = null, assigneeId: String? = null, state: String? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        this.assigneeId = assigneeId
        this.state = state
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    constructor(value: com.sljricardo.jooq.tables.pojos.Task?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.description = value.description
            this.assigneeId = value.assigneeId
            this.state = value.state
            resetChangedOnNotNull()
        }
    }
}
