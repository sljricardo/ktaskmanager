/*
 * This file is generated by jOOQ.
 */
package com.sljricardo.jooq.tables


import com.sljricardo.jooq.DefaultSchema
import com.sljricardo.jooq.keys.TASK__FK_TASK_PK_USERS
import com.sljricardo.jooq.keys.TASK__PK_TASK
import com.sljricardo.jooq.tables.records.TaskRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Task(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TaskRecord>?,
    aliased: Table<TaskRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TaskRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>TASK</code>
         */
        val TASK: Task = Task()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TaskRecord> = TaskRecord::class.java

    /**
     * The column <code>TASK.ID</code>.
     */
    val ID: TableField<TaskRecord, String?> = createField(DSL.name("ID"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>TASK.NAME</code>.
     */
    val NAME: TableField<TaskRecord, String?> = createField(DSL.name("NAME"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>TASK.DESCRIPTION</code>.
     */
    val DESCRIPTION: TableField<TaskRecord, String?> = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>TASK.ASSIGNEE_ID</code>.
     */
    val ASSIGNEE_ID: TableField<TaskRecord, String?> = createField(DSL.name("ASSIGNEE_ID"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<TaskRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TaskRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>TASK</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>TASK</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>TASK</code> table reference
     */
    constructor(): this(DSL.name("TASK"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TaskRecord>): this(Internal.createPathAlias(child, key), child, key, TASK, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<TaskRecord> = TASK__PK_TASK
    override fun getReferences(): List<ForeignKey<TaskRecord, *>> = listOf(TASK__FK_TASK_PK_USERS)

    private lateinit var _users: Users

    /**
     * Get the implicit join path to the <code>USERS</code> table.
     */
    fun users(): Users {
        if (!this::_users.isInitialized)
            _users = Users(this, TASK__FK_TASK_PK_USERS)

        return _users;
    }

    val users: Users
        get(): Users = users()
    override fun `as`(alias: String): Task = Task(DSL.name(alias), this)
    override fun `as`(alias: Name): Task = Task(alias, this)
    override fun `as`(alias: Table<*>): Task = Task(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Task = Task(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Task = Task(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Task = Task(name.getQualifiedName(), null)
}
